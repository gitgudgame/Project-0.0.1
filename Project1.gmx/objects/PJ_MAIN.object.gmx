<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_PJ_MAIN_DOWN</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start
image_speed = 0

enum player_status {
     still = PJ_MAIN_STILL,
     walking = PJ_MAIN_WALK
}

dir = "down" //default direction
state = player_status.still; //default state

global.debug = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Captura de velocidad de movimiento
if (global.pause){ //Instancia de pausa
    exit
    image_speed = 0
    }
vv = 0; //Velocidad vertical
vh = 0; //Velocidad horizontal
v = 5; //Velocidad total
if (keyboard_check(ord('W'))) vv = -v;
if (keyboard_check(ord('S'))) vv = v;
if (keyboard_check(ord('A'))) vh = -v;
if (keyboard_check(ord('D'))) vh = v;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gestión de colisiones
// Vieja gestión de procesamiento de movimiento y colisiones, abajo está el más nuevo
//pm = place_meeting(x+vh,y+vv,OBJ_PARED_1);
//cl = collision_line(x,y,x+vh,y+vv,OBJ_PARED_1,false,false);

//if (pm or cl) {
    // Comprobando colisión horizontal
    //for(var i=0;i&lt;abs(vh);i++){
        //if (place_meeting(x+sign(vh),y,OBJ_PARED_1)) then break;
        //x += sign(vh);
    //}
    // Comprobando colisión vertical
    //for(var i=0;i&lt;abs(vv);i++){
        //if (place_meeting(x,y+sign(vv),OBJ_PARED_1)) then break;
        //y += sign(vv);
    //}
    //vh = 0;
    //vv = 0;
//}

//hspeed = vh;
//vspeed = vv;

// Gestión de colisiones contra paredes y objetos nueva
if (instance_place(x+vh,y,OBJ_PARED_1)) { vh = 0; }
if (instance_place(x,y+vv,OBJ_PARED_1)) { vv = 0; }

// Colisión horizontal de objeto interactivo sólo si está habilitada
interactive = instance_place(x+vh,y,OBJ_INTERACTIVE);
if (interactive) {
    if (interactive.colision){
        vh = 0;
        }
}

//Colisión vertical de objeto interactivo solo si está habilitada
interactive = instance_place(x,y+vv,OBJ_INTERACTIVE);
if (interactive) { if (interactive.colision) vv = 0; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gestion de estado de movimiento

//Determinando direccion
if (vv &gt; 0) dir = "down"
else if (vv &lt; 0) dir = "up"
else if (vh &gt; 0) dir = "right"
else if (vh &lt; 0) dir = "left" 
//Determinando estado según dirección
if (dir !="") status = player_status.walking

if (vh == 0 and vv == 0) status = player_status.still
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimiento final y estado
//Básicamente, lo que hace que el personaje quede mirando a una dirección luego de ir hacia esta

x += vh;
y += vv;

script_execute(status)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug hud
if (global.debug) {
    draw_set_font(f_Debug);
    draw_set_halign(fa_left);
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    draw_rectangle(0,0,270,85,false);
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_text(2,9,"FPS/REAL FPS: " + string(fps)+"/"+string(fps_real));
    draw_text(2,27,"STATUS: " + script_get_name(status));
    draw_text(2,45,"SPRITE: " + sprite_get_name(sprite_index));
    draw_text(2,63,"IMAGE INDEX: " +  string(image_index));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle debug info
global.debug = !global.debug;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
